#+title: 0002-logger
#+date: <2023-09-28>

* Why not printf
There are roughly two types of debugging, one uses the debugger, which
may comes along with their IDE, like visual studio, the others use
printf.

I am one of the latter. Because I don't use an IDE, I write code in
Emacs, there isn't a debugger built-in. I may use gdb, but using gdb
is kind of annoying for my small projects. The only time I found gdb
useful is when I was writing a little game, which I accidentally free
the sprite before rendering.

Using printf is a casual way of putting words to stdout and hope that
the place I print something is the place goes wrong. In my previous
experience, as a self-taught coding monkey, I usually print something
like "bello" and "banana" in the place I suspect to goes wrong.

This is a bad habit. With a logger, hopefully I can improve.

* Designing a logger
Usually, a logger consists of log levels and output file. I used to
use a output file. Then I change back to stdout and stderr, then pipe
the outputs into files when initializing the application. This kind of
works in web applications, but for performance intensive game
development, frequently taking with io is expensive.

For now, our logger still uses stdout and stderr, later I will add a
buffer to enable spitting out logs in batches.

* Debug level
Just use the convention.

1. fatal
2. error
3. warn
4. info
5. debug
6. trace
